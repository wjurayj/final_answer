{
  "results": {
    "aime24_figures": {
      "alias": "aime24_figures",
      "exact_match,none": 0.0,
      "exact_match_stderr,none": "N/A",
      "extracted_answers,none": -1,
      "extracted_answers_stderr,none": "N/A"
    },
    "aime24_nofigures": {
      "alias": "aime24_nofigures",
      "exact_match,none": 0.0,
      "exact_match_stderr,none": "N/A",
      "extracted_answers,none": -1,
      "extracted_answers_stderr,none": "N/A"
    },
    "gpqa_diamond_openai": {
      "alias": "gpqa_diamond_openai",
      "exact_match,none": 0.2777777777777778,
      "exact_match_stderr,none": "N/A",
      "extracted_answers,none": -1,
      "extracted_answers_stderr,none": "N/A"
    }
  },
  "group_subtasks": {
    "aime24_figures": [],
    "aime24_nofigures": [],
    "gpqa_diamond_openai": []
  },
  "configs": {
    "aime24_figures": {
      "task": "aime24_figures",
      "tag": [
        "math_word_problems"
      ],
      "dataset_path": "simplescaling/aime24_figures",
      "dataset_name": "default",
      "test_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        solution = doc.get(\"solution\", doc.get(\"orig_solution\", doc.get(\"orig_orig_solution\")))\n        problem = doc.get(\"problem\", doc.get(\"orig_problem\", doc.get(\"orig_orig_problem\")))\n        answer = doc.get(\"answer\", doc.get(\"orig_answer\", doc.get(\"orig_orig_answer\")))\n        if solution is None:\n            print(\"Warning: No solution found; DOC:\", doc)\n        out_doc = {\n            \"problem\": problem,\n            \"solution\": solution,\n            \"answer\": answer,\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return QUERY_TEMPLATE.format(Question=doc[\"problem\"])\n",
      "doc_to_target": "answer",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    metrics = {\"exact_match\": None, \"extracted_answers\": []}\n    # bp()\n    # Multiple results -> we are measuring cov/maj etc\n    if isinstance(results[0], list):\n        results = results[0]\n        n_res = len(results) # e.g. 64\n        n_res_list = [2**i for i in range(1, int(n_res.bit_length()))] # e.g. [2, 4, 8, 16, 32, 64]\n        metrics = {\n            **metrics,\n            \"exact_matches\": [],\n            **{f\"cov@{n}\": -1 for n in n_res_list},\n            **{f\"maj@{n}\": -1 for n in n_res_list},\n        }\n\n    if os.getenv(\"PROCESSOR\", \"\") == \"gpt-4o-mini\":\n        sampler = ChatCompletionSampler(model=\"gpt-4o-mini\")\n    else:\n        print(f\"Unknown processor: {os.getenv('PROCESSOR')}; set 'PROCESSOR=gpt-4o-mini' and 'OPENAI_API_KEY=YOUR_KEY' for best results.\")\n        sampler = None\n\n    if isinstance(doc[\"answer\"], str) and doc[\"answer\"].isdigit():\n        gt = str(int(doc[\"answer\"])) # 023 -> 23\n    else:\n        gt = str(doc[\"answer\"])\n    split_tokens = [\"<|im_start|>answer\\n\", \"<|im_start|>\"]\n\n    for i, a in enumerate(results, start=1):\n        if split_tokens[0] in a:\n            a = a.split(split_tokens[0])[-1]\n        elif split_tokens[1] in a:\n            a = a.split(split_tokens[1])[-1]\n            if \"\\n\" in a:\n                a = \"\\n\".join(a.split(\"\\n\")[1:])\n\n        if (box := last_boxed_only_string(a)) is not None:\n            a = remove_boxed(box)\n        # re.DOTALL is key such that newlines are included e.g. if it does `Answer: Here is the solution:\\n\\n10`\n        elif (matches := re.findall(ANSWER_PATTERN, a, re.DOTALL)) != []:\n            a = matches[-1]  # Get the last match\n\n        # AIME answers are from 000 to 999 so often it is a digit anyways\n        if (a.isdigit()) and (gt.isdigit()):\n            a = str(int(a)) # 023 -> 23\n        elif sampler is not None:\n            options = [gt] + list(set(metrics[\"extracted_answers\"]) - {gt})\n            if len(options) > 7:\n                # Could switch back to exact returning like in AIME in that case\n                # Problem with exact returning is that it sometimes messes up small things like a dollar sign\n                print(\"Warning: Lots of options which may harm indexing performance:\", options)            \n            # This ensures that if doc['answer'] is \\text{Evelyn} it is represented as such and not \\\\text{Evelyn}\n            options_str = \"[\" + \", \".join([\"'\" + str(o) + \"'\" for o in options]) + \"]\"\n            # a = extract_answer(sampler, options, a)\n            idx = extract_answer_idx(sampler, options_str, a)\n            if idx != \"-1\":\n                if idx.isdigit():\n                    idx = int(idx) - 1\n                    if len(options) > idx >= 0:\n                        a = options[idx]\n                    else:\n                        print(\"Warning: Index out of bounds; leaving answer unchanged\\n\", a, \"\\noptions\", options_str, \"\\ndoc['answer']\", gt, \"\\nidx\", idx)\n                else:\n                    print(\"Warning: Processing did not produce integer index\\na\", a, \"\\noptions\", options_str, \"\\ndoc['answer']\", gt, \"\\nidx\", idx)\n        else:\n            pass # TODO: Maybe add back legacy processing\n\n        metrics[\"extracted_answers\"].append(a)\n        a = int(a == gt)\n        if not(a): # Optional logging\n            print(\"Marked incorrect\\na \" + metrics[\"extracted_answers\"][-1] + \"\\ndoc['answer'] \" + gt)\n        if i == 1:\n            metrics[\"exact_match\"] = a\n            if \"exact_matches\" in metrics:\n                metrics[\"exact_matches\"].append(a)\n        elif i > 1:\n            metrics[\"exact_matches\"].append(a)\n            if i in n_res_list:\n                metrics[f\"cov@{i}\"] = int(1 in metrics[\"exact_matches\"])\n                metrics[f\"maj@{i}\"] = int(gt == Counter(metrics[\"extracted_answers\"]).most_common(1)[0][0])\n\n    return metrics\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "exact_match_aime24",
          "aggregation": "mean_last30",
          "higher_is_better": true
        },
        {
          "metric": "extracted_answers",
          "aggregation": "bypass",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 32768
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "aime24_nofigures": {
      "task": "aime24_nofigures",
      "tag": [
        "math_word_problems"
      ],
      "dataset_path": "simplescaling/aime24_nofigures",
      "dataset_name": "default",
      "test_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        solution = doc.get(\"solution\", doc.get(\"orig_solution\", doc.get(\"orig_orig_solution\")))\n        problem = doc.get(\"problem\", doc.get(\"orig_problem\", doc.get(\"orig_orig_problem\")))\n        answer = doc.get(\"answer\", doc.get(\"orig_answer\", doc.get(\"orig_orig_answer\")))\n        if solution is None:\n            print(\"Warning: No solution found; DOC:\", doc)\n        out_doc = {\n            \"problem\": problem,\n            \"solution\": solution,\n            \"answer\": answer,\n        }\n        if getattr(doc, \"few_shot\", None) is not None:\n            out_doc[\"few_shot\"] = True\n        return out_doc\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    return QUERY_TEMPLATE.format(Question=doc[\"problem\"])\n",
      "doc_to_target": "answer",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    metrics = {\"exact_match\": None, \"extracted_answers\": []}\n    # bp()\n    # Multiple results -> we are measuring cov/maj etc\n    if isinstance(results[0], list):\n        results = results[0]\n        n_res = len(results) # e.g. 64\n        n_res_list = [2**i for i in range(1, int(n_res.bit_length()))] # e.g. [2, 4, 8, 16, 32, 64]\n        metrics = {\n            **metrics,\n            \"exact_matches\": [],\n            **{f\"cov@{n}\": -1 for n in n_res_list},\n            **{f\"maj@{n}\": -1 for n in n_res_list},\n        }\n\n    if os.getenv(\"PROCESSOR\", \"\") == \"gpt-4o-mini\":\n        sampler = ChatCompletionSampler(model=\"gpt-4o-mini\")\n    else:\n        print(f\"Unknown processor: {os.getenv('PROCESSOR')}; set 'PROCESSOR=gpt-4o-mini' and 'OPENAI_API_KEY=YOUR_KEY' for best results.\")\n        sampler = None\n\n    if isinstance(doc[\"answer\"], str) and doc[\"answer\"].isdigit():\n        gt = str(int(doc[\"answer\"])) # 023 -> 23\n    else:\n        gt = str(doc[\"answer\"])\n    split_tokens = [\"<|im_start|>answer\\n\", \"<|im_start|>\"]\n\n    for i, a in enumerate(results, start=1):\n        if split_tokens[0] in a:\n            a = a.split(split_tokens[0])[-1]\n        elif split_tokens[1] in a:\n            a = a.split(split_tokens[1])[-1]\n            if \"\\n\" in a:\n                a = \"\\n\".join(a.split(\"\\n\")[1:])\n\n        if (box := last_boxed_only_string(a)) is not None:\n            a = remove_boxed(box)\n        # re.DOTALL is key such that newlines are included e.g. if it does `Answer: Here is the solution:\\n\\n10`\n        elif (matches := re.findall(ANSWER_PATTERN, a, re.DOTALL)) != []:\n            a = matches[-1]  # Get the last match\n\n        # AIME answers are from 000 to 999 so often it is a digit anyways\n        if (a.isdigit()) and (gt.isdigit()):\n            a = str(int(a)) # 023 -> 23\n        elif sampler is not None:\n            options = [gt] + list(set(metrics[\"extracted_answers\"]) - {gt})\n            if len(options) > 7:\n                # Could switch back to exact returning like in AIME in that case\n                # Problem with exact returning is that it sometimes messes up small things like a dollar sign\n                print(\"Warning: Lots of options which may harm indexing performance:\", options)            \n            # This ensures that if doc['answer'] is \\text{Evelyn} it is represented as such and not \\\\text{Evelyn}\n            options_str = \"[\" + \", \".join([\"'\" + str(o) + \"'\" for o in options]) + \"]\"\n            # a = extract_answer(sampler, options, a)\n            idx = extract_answer_idx(sampler, options_str, a)\n            if idx != \"-1\":\n                if idx.isdigit():\n                    idx = int(idx) - 1\n                    if len(options) > idx >= 0:\n                        a = options[idx]\n                    else:\n                        print(\"Warning: Index out of bounds; leaving answer unchanged\\n\", a, \"\\noptions\", options_str, \"\\ndoc['answer']\", gt, \"\\nidx\", idx)\n                else:\n                    print(\"Warning: Processing did not produce integer index\\na\", a, \"\\noptions\", options_str, \"\\ndoc['answer']\", gt, \"\\nidx\", idx)\n        else:\n            pass # TODO: Maybe add back legacy processing\n\n        metrics[\"extracted_answers\"].append(a)\n        a = int(a == gt)\n        if not(a): # Optional logging\n            print(\"Marked incorrect\\na \" + metrics[\"extracted_answers\"][-1] + \"\\ndoc['answer'] \" + gt)\n        if i == 1:\n            metrics[\"exact_match\"] = a\n            if \"exact_matches\" in metrics:\n                metrics[\"exact_matches\"].append(a)\n        elif i > 1:\n            metrics[\"exact_matches\"].append(a)\n            if i in n_res_list:\n                metrics[f\"cov@{i}\"] = int(1 in metrics[\"exact_matches\"])\n                metrics[f\"maj@{i}\"] = int(gt == Counter(metrics[\"extracted_answers\"]).most_common(1)[0][0])\n\n    return metrics\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "extracted_answers",
          "aggregation": "bypass",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 32768
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "gpqa_diamond_openai": {
      "task": "gpqa_diamond_openai",
      "tag": "gpqa",
      "dataset_path": "Idavidrein/gpqa",
      "dataset_name": "gpqa_diamond",
      "training_split": "train",
      "validation_split": "train",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        choices = [\n            doc[\"Incorrect Answer 1\"],\n            doc[\"Incorrect Answer 2\"],\n            doc[\"Incorrect Answer 3\"],\n            doc[\"Correct Answer\"],\n        ]\n\n        random.shuffle(choices)\n        correct_answer_index = choices.index(doc[\"Correct Answer\"])\n\n        out_doc = {\n            \"choice1\": choices[0],\n            \"choice2\": choices[1],\n            \"choice3\": choices[2],\n            \"choice4\": choices[3],\n            \"answer\": f\"{chr(65 + correct_answer_index)}\",\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text_gpqa(doc: dict) -> str:\n    return QUERY_TEMPLATE.format(Question=doc[\"Question\"], choice1=doc[\"choice1\"], choice2=doc[\"choice2\"], choice3=doc[\"choice3\"], choice4=doc[\"choice4\"])\n",
      "doc_to_target": "answer",
      "process_results": "def process_results(doc: dict, results: List[str]) -> Dict[str, int]:\n    metrics = {\"exact_match\": None, \"extracted_answers\": []}\n    # Multiple results -> we are measuring cov/maj etc\n    if isinstance(results[0], list):\n        results = results[0]\n        n_res = len(results) # e.g. 64\n        n_res_list = [2**i for i in range(1, int(n_res.bit_length()))] # e.g. [2, 4, 8, 16, 32, 64]\n        metrics = {\n            **metrics,\n            \"exact_matches\": [],\n            **{f\"cov@{n}\": -1 for n in n_res_list},\n            **{f\"maj@{n}\": -1 for n in n_res_list},\n        }\n\n    if os.getenv(\"PROCESSOR\", \"\") == \"gpt-4o-mini\":\n        sampler = ChatCompletionSampler(model=\"gpt-4o-mini\")\n        question = QUERY_TEMPLATE_API.format(Question=doc[\"Question\"], choice1=doc[\"choice1\"], choice2=doc[\"choice2\"], choice3=doc[\"choice3\"], choice4=doc[\"choice4\"])\n    else:\n        print(f\"Unknown processor: {os.getenv('PROCESSOR')}; set 'PROCESSOR=gpt-4o-mini' and 'OPENAI_API_KEY=YOUR_KEY' for best results.\")\n        sampler = None\n\n    split_tokens = [\"<|im_start|>answer\\n\", \"<|im_start|>\"]\n    for i, a in enumerate(results, start=1):\n        if split_tokens[0] in a:\n            a = a.split(split_tokens[0])[-1]\n        elif split_tokens[1] in a:\n            a = a.split(split_tokens[1])[-1]\n            if \"\\n\" in a:\n                a = \"\\n\".join(a.split(\"\\n\")[1:])\n\n        if (box := last_boxed_only_string(a)) is not None:\n            a = remove_boxed(box)\n        # re.DOTALL is key such that newlines are included e.g. if it does `Answer: Here is the solution:\\n\\n10`\n        elif (matches := re.findall(ANSWER_PATTERN, a, re.DOTALL)) != []:\n            a = matches[-1]  # Get the last match\n\n        if a in [\"a\", \"b\", \"c\", \"d\"]:\n            a = a.upper()\n\n        if a not in [\"A\", \"B\", \"C\", \"D\"]:\n            if sampler is not None:\n                a = extract_answer(sampler, question, a)\n            else:\n                pass # TODO: Maybe add back legacy processing\n\n        if a not in [\"A\", \"B\", \"C\", \"D\"]:\n            print(f\"Warning: Default to A as given {results[i-1]} extracted {a}\")\n            a = \"A\"\n\n        metrics[\"extracted_answers\"].append(a)\n        a = int(a == doc[\"answer\"])\n        if not(a): # Optional logging\n            print(\"Marked incorrect\\na \" + metrics[\"extracted_answers\"][-1] + \"\\ndoc['answer'] \" + doc[\"answer\"])\n        if i == 1:\n            metrics[\"exact_match\"] = a\n            if \"exact_matches\" in metrics:\n                metrics[\"exact_matches\"].append(a)\n        elif i > 1:\n            metrics[\"exact_matches\"].append(a)\n            if i in n_res_list:\n                metrics[f\"cov@{i}\"] = int(1 in metrics[\"exact_matches\"])\n                metrics[f\"maj@{i}\"] = int(doc[\"answer\"] == Counter(metrics[\"extracted_answers\"]).most_common(1)[0][0])\n\n    return metrics\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "extracted_answers",
          "aggregation": "bypass",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 32768
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "aime24_figures": 1.0,
    "aime24_nofigures": 1.0,
    "gpqa_diamond_openai": 1.0
  },
  "n-shot": {
    "aime24_figures": 0,
    "aime24_nofigures": 0,
    "gpqa_diamond_openai": 0
  },
  "higher_is_better": {
    "aime24_figures": {
      "exact_match": true,
      "exact_match_aime24": true,
      "extracted_answers": true
    },
    "aime24_nofigures": {
      "exact_match": true,
      "extracted_answers": true
    },
    "gpqa_diamond_openai": {
      "exact_match": true,
      "extracted_answers": true
    }
  },
  "n-samples": {
    "gpqa_diamond_openai": {
      "original": 198,
      "effective": 198
    },
    "aime24_nofigures": {
      "original": 30,
      "effective": 30
    },
    "aime24_figures": {
      "original": 30,
      "effective": 30
    }
  },
  "config": {
    "model": "dummy",
    "model_args": "",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 0,
    "gen_kwargs": {
      "max_gen_toks": 32768
    },
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "5f998c0",
  "date": 1738967372.1536057,
  "pretty_env_info": "PyTorch version: 2.4.0+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux 8.8 (Green Obsidian) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-18)\nClang version: Could not collect\nCMake version: Could not collect\nLibc version: glibc-2.28\n\nPython version: 3.10.16 (main, Dec 11 2024, 16:24:50) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-477.27.1.el8_8.x86_64-x86_64-with-glibc2.28\nIs CUDA available: True\nCUDA runtime version: 12.3.107\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H100 80GB HBM3\nGPU 1: NVIDIA H100 80GB HBM3\nGPU 2: NVIDIA H100 80GB HBM3\nGPU 3: NVIDIA H100 80GB HBM3\n\nNvidia driver version: 560.28.03\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              128\nOn-line CPU(s) list: 0-127\nThread(s) per core:  1\nCore(s) per socket:  64\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           AuthenticAMD\nCPU family:          25\nModel:               17\nModel name:          AMD EPYC 9534 64-Core Processor\nStepping:            1\nCPU MHz:             2450.000\nCPU max MHz:         3718.0659\nCPU min MHz:         1500.0000\nBogoMIPS:            4892.54\nVirtualization:      AMD-V\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            1024K\nL3 cache:            32768K\nNUMA node0 CPU(s):   0-63\nNUMA node1 CPU(s):   64-127\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba perfmon_v2 ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local avx512_bf16 clzero irperf xsaveerptr wbnoinvd amd_ppin cppc arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif v_spec_ctrl avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq la57 rdpid overflow_recov succor smca fsrm flush_l1d\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.4.0\n[pip3] torchaudio==2.5.1\n[pip3] torchvision==0.19.0\n[pip3] triton==3.0.0\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] torch                     2.4.0                    pypi_0    pypi\n[conda] torchaudio                2.5.1                    pypi_0    pypi\n[conda] torchvision               0.19.0                   pypi_0    pypi\n[conda] triton                    3.0.0                    pypi_0    pypi",
  "transformers_version": "4.46.1",
  "upper_git_hash": null,
  "task_hashes": {
    "gpqa_diamond_openai": "a113cc5cde9ec4f477e317a77df0b74d5a329bc19a53cd7c6810157b1ccc942f",
    "aime24_nofigures": "95647de50af7709cb028be42b4ae8136e1035efd63091cd33ff2ce9dd7608c54",
    "aime24_figures": "af6d37eeb4705bc78c51af6ec20c7428a1611087282a9e7d0bc2cc9e0e51ef10"
  },
  "model_source": "dummy",
  "model_name": "",
  "model_name_sanitized": "",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 10902856.770669864,
  "end_time": 10902878.37619714,
  "total_evaluation_time_seconds": "21.605527276173234"
}